<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_base_enemy_3</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_Enemies</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>self.target = 1;
self.target_x = obj_player_ship.x;
self.target_y = obj_player_ship.y;
self.target_direction = point_direction(x,y,obj_player_ship.x,obj_player_ship.y)
self.shoot_timer = 1;
self.hit = -1;
self.hull = 16;
self.missile_count = 0;
self.shoot_missile = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(obj_player_ship))
{
    if (target == 1)
    {
        target_direction = point_direction(x,y,obj_player_ship.x,obj_player_ship.y);
        facingMinusTarget = image_angle - target_direction;
        angleDiff = facingMinusTarget;
        if(abs(facingMinusTarget) &gt; 180)
        {
            if(image_angle &gt; target_direction)
            {
                angleDiff = -1 * ((360 - image_angle) + target_direction);
            }
            else
            {
                angleDiff = (360 - target_direction) + image_angle;
            }
        }
    
    
        var leastAccurateAim = 5;
        if(angleDiff &gt; leastAccurateAim)
        {
            image_angle -= 2;
        }
        else if(angleDiff &lt; -leastAccurateAim)
        {
            image_angle += 2;
        }
        else
        {
            if (distance_to_point(obj_player_ship.x,obj_player_ship.y) &gt; 600)
            {
                target = 2;
                target_x = obj_player_ship.x;
                target_y = obj_player_ship.y;
                direction = image_angle;
                old_distance = distance_to_point(target_x,target_y);
            }
            else
            {
                if (self.shoot_timer == 0 &amp;&amp; global.firing_test == 1)
                {
                    if (missile_count == 1)
                    {
                        self.shoot_timer = 450;
                        shoot_missile = 1;
                    }
                    else if (shoot_missile == 1)
                    {
                        self.shoot_timer = 30;
                        missile_count = 3;
                        shoot_missile = 0;
                    }
                    else
                    {
                        self.shoot_timer = 30;
                    }
                    missile_count -= 1;
                    inst = instance_create(x-5*sin(pi*image_angle/180),y-5*cos(pi*image_angle/180),obj_enemy_missile_1);
                    //inst = instance_position(x-5*sin(pi*image_angle/180),y-5*cos(pi*image_angle/180),obj_enemy_missile_1);
                    (inst).image_angle = self.image_angle;
                }
            }
            
        }
    }
    if (target == 2)
    {
        if (distance_to_point(target_x,target_y) &gt; old_distance)
        {
            self.target = 1;
        }
        old_distance = distance_to_point(target_x,target_y)
        speed += 0.05;
        if (distance_to_point(obj_player_ship.x,obj_player_ship.y) &lt; 500)
        {
            self.target = 1;
        }
        effect_create_below(ef_smoke,self.x,self.y,0,c_silver)
    }
}

if (shoot_timer &gt; 0)
{
    shoot_timer--;
}
speed *= 0.993;
if (target == 1 &amp;&amp; speed &lt; 0.3)
{
    speed = 0;
}
if (hit &gt;= 0)
{
    if ((hit % 2) == 0)
    {
        if ((hit % 4) == 0)
        {
            sprite_index = spr_base_enemy_3;
        }
        else
        {
            sprite_index = spr_enemy_3_flash;
        }
    }
    hit -= 1;
}
if (self.hull &lt;= 0)
{
    instance_create(x,y,obj_enemy_explosion)
    with (self)
    {
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Player_Projectiles">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (self.hit &lt;= 0)
{
    self.image_index = spr_enemy_3_flash;
    hit = 6;
    self.hull--;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
draw_sprite(spr_enemy_marker,0,obj_map.x + (x/50),obj_map.y + (y/50)) {depth = -11};
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
